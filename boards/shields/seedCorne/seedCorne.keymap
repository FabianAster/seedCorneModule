/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        betterBackTick: betterBackTick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp SPACE>;
            label = "BETTERBACKTICK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E         &kp R  &kp T        &kp Y      &kp U  &kp I       &kp O    &kp P             &kp BSPC
&kp LEFT_SHIFT    &kp A  &kp S  &kp D         &kp F  &kp G        &kp H      &kp J  &kp K       &kp L    &kp LS(NUMBER_2)  &kp LEFT_SHIFT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C         &kp V  &kp B        &kp N      &kp M  &kp COMMA   &kp DOT  &kp FSLH          &kp CAPS
                  &kp Z  &kp X  &kp LEFT_ALT  &mo 2  &kp SPACE    &kp ENTER  &mo 1  &kp ESCAPE  &kp Z    &kp X
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1                 &kp N2        &kp N3             &kp N4         &kp N5        &kp N6    &kp N7         &kp N8       &kp N9     &kp N0     &kp BSPC
&kp LSHIFT  &kp LS(RIGHT_BRACKET)  &kp QUESTION  &kp RIGHT_BRACKET  &kp LS(N0)     &kp PIPE      &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &kp MINUS  &kp PLUS
&kp LCTRL   &bt BT_CLR             &bt BT_NXT    &out OUT_TOG       &kp LC(LA(Q))  &kp LS(N7)    &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans     &trans
                                                 &kp LALT           &trans         &kp SPACE     &kp RET   &trans         &kp ESC
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp RA(Q)              &kp AT             &kp RA(E)              &kp DLLR           &kp PRCNT    &kp MINUS      &kp RA(N7)  &kp RA(N0)  &kp LPAR         &kp RPAR     &kp BSPC
&kp LSHFT  &kp LS(RIGHT_BRACKET)  &kp RIGHT_BRACKET  &kp RA(RIGHT_BRACKET)  &kp LS(N0)         &kp PIPE     &kp LS(MINUS)  &kp LS(N8)  &kp LS(N9)  &betterBackTick  &kp LS(SQT)  &kp LA(LC(N0))
&kp LCTRL  &trans                 &kp LESS_THAN      &kp GREATER_THAN       &kp RA(LESS_THAN)  &trans       &kp RA(MINUS)  &kp RA(N8)  &kp RA(N9)  &kp RBRC         &kp PIPE     &kp TILDE
                                                     &kp LALT               &trans             &kp SPACE    &kp RET        &trans      &kp ESC
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
